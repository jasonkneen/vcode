// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Vite
// plugin that tells the Electron app where to look for the Vite-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_VITE_DEV_SERVER_URL: string;
declare const MAIN_WINDOW_VITE_NAME: string;

// Preload types
interface ThemeModeContext {
  toggle: () => Promise<boolean>;
  dark: () => Promise<void>;
  light: () => Promise<void>;
  system: () => Promise<boolean>;
  current: () => Promise<"dark" | "light" | "system">;
}
interface ElectronWindow {
  minimize: () => Promise<void>;
  maximize: () => Promise<void>;
  close: () => Promise<void>;
}

interface ProjectApi {
  openFolder: (folderPath?: string) => Promise<void>;
  getCurrentProject: () => Promise<string | null>; 
  setCurrentProject: (projectPath: string) => Promise<void>;
  openFile: (filePath: string) => Promise<{ content: string; path: string }>;
  saveFile: (filePath: string, content: string) => Promise<void>;
  createFile: (filePath: string, content?: string) => Promise<void>;
  createFolder: (folderPath: string) => Promise<void>;
  deleteFile: (filePath: string) => Promise<void>;
  deleteFolder: (folderPath: string) => Promise<void>;
  renameFile: (oldPath: string, newPath: string) => Promise<void>;
  renameFolder: (oldPath: string, newPath: string) => Promise<void>;
  getFileStats: (filePath: string) => Promise<{
    size: number;
    createdAt: Date;
    modifiedAt: Date;
  }>;
  getDirectoryTree: (
    rootPath: string,
    options?: { depth?: number; includeFiles?: boolean } 
  ) => Promise<any>;
  watchFileChanges: (filePath: string) => Promise<void>;
  unwatchFileChanges: (filePath: string) => Promise<void>;
  searchFiles: (
    query: string,
    rootPath?: string,
    options?: { includePatterns?: string[]; excludePatterns?: string[] }
  ) => Promise<string[]>;
  searchInFiles: (
    query: string,
    rootPath?: string,
    options?: { filePatterns?: string[]; excludePatterns?: string[] }
  ) => Promise<string[]>;
  getRecentProjects: () => Promise<string[]>;
  addRecentProject: (projectPath: string, projectName?: string) => Promise<void>;
  removeRecentProject: (projectPath: string) => Promise<void>;
}

interface AI {
  sendMessage: (payload: { messages: import('ai').CoreMessage[], requestId: string }) => Promise<{ success: boolean, requestId: string }>;
  onStreamChunk: (callback: (data: { requestId: string, chunk: Uint8Array }) => void) => void;
  onStreamEnd: (callback: (data: { requestId: string }) => void) => void;
  onStreamError: (callback: (data: { requestId: string, error: string }) => void) => void;
  removeAllListeners: () => void;
}

declare interface Window {
  themeMode: ThemeModeContext;
  electronWindow: ElectronWindow;
  projectApi: ProjectApi;
  ai: AI;
}
